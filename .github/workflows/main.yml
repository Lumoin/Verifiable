name: Verifiable .NET build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - "**.md"
  release:
    types:
      - published

  schedule:
  # A daily build to check all is still functioning.
  - cron: "0 0 * * *"

env:
  # This environment variable is checked in tests.
  # For TPM either a Windows simulator or a platform TPM is used.
  # Tests check that platform TPM tests must be run on Windows or Linux,
  # MacOS tests are skipped.
  USE_PLATFORM_TPM: true

  DOTNET_ENVIRONMENT: CI
  BUILD_CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  NUGET_XMLDOC_MODE: skip
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  NUGET_FEED: https://api.nuget.org/v3/index.json
  GITHUB_USER: ${{ github.repository_owner }}
  GITHUB_FEED: https://nuget.pkg.github.com/lumoin/

  # These are the Nuget packages that will be packed and uploaded.
  PROJECTS: >
    Verifiable
    Verifiable.BouncyCastle
    Verifiable.Core
    Verifiable.DecentralizedWebNode
    Verifiable.Jwt
    Verifiable.NSec
    Verifiable.Microsoft
    Verifiable.Sidetree
    Verifiable.Tpm

  # These are the test projects that will be reported.
  VERIFIABLE_TESTS: Verifiable.Tests

  # These are allowed endpoints these actions can contact.
  COMMON_ALLOWED_ENDPOINTS: >
    api.clearlydefined.io:443
    aka.ms:443
    api.github.com:443
    api.nuget.org:443
    builds.dotnet.microsoft.com:443
    ci.dot.net:443
    pkgs.dev.azure.com:443
    dashboard.stryker-mutator.io:443
    github.com:443
    nuget.pkg.github.com:443
    fulcio.sigstore.dev:443
    rekor.sigstore.dev:443
    cacerts.digicert.com:80
    ts-crl.ws.symantec.com:80
    crl3.digicert.com:80
    crl4.digicert.com:80
    s.symcb.com:80
    ocsp.digicert.com:80

    # Dotnet tools download CRL list from here.
    www.microsoft.com:80

jobs:
  build:
    name: Build Verifiable packages
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      attestations: write
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
    - name: Harden Runner
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
      with:
        disable-sudo: true
        egress-policy: block
        allowed-endpoints: ${{ env.COMMON_ALLOWED_ENDPOINTS }}

    - name: Checkout code
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
      with:
        cache: true
        cache-dependency-path: '**/packages.lock.json'
        global-json-file: global.json

    - name: Set up .NET 9 for NuGet package validation
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
      with:
        dotnet-version: 9.0.x

    - name: Install dependencies
      run: dotnet restore --locked-mode

    - name: Cache local .NET tools
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
      with:
        path: ~/.dotnet/tools
        key: dotnet-tools-${{ runner.os }}-${{ hashFiles('.config/dotnet-tools.json') }}
        restore-keys: |
          dotnet-tools-${{ runner.os }}-

    - name: Restore local .NET tools
      run: dotnet tool restore

    - name: Add Problem Matcher for dotnet-format
      uses: xt0rted/dotnet-format-problem-matcher@b90c4f18e3daa4f8fd266e41eba4f351b2e00b75

    # The version numbers are determined and set here so it can be set appropriately to code and NuGet packages.
    # See explanation at https://dusted.codes/github-actions-for-dotnet-core-nuget-packages.
    - name: Set NuGet packages and suffix version
      run: |
        # Bash script to determine the version and version suffix for CI/CD
        # Use git to find the latest tag; if none are found, default to "0.0.1".
        latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.1)

        # Case 1: A release is being created.
        # Extract the version from the tag and add a suffix with the short SHA.
        if [[ $GITHUB_EVENT_NAME == 'release' ]]; then
          # Extract the version number from the release tag and remove any 'v' prefix.
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          VERSION="${VERSION//v}"
          # Set PACKAGE_VERSION and VERSION, and add a VERSION_SUFFIX for clarity in identifying the release and commit.
          echo "PACKAGE_VERSION=${VERSION}+${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "TAG_VERSION=${VERSION}" >> "$GITHUB_ENV"

        # Case 2: The 'develop' branch.
        # Use the latestTag as the base version and add a suffix with "develop", the run_id, and the short SHA.
        elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
          # Set PACKAGE_VERSION and PACKAGE, and add a VERSION_SUFFIX for clarity in identifying the development build, run, and commit.
          echo "PACKAGE_VERSION=${latestTag//v}-develop.${GITHUB_RUN_ID}+${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          echo "VERSION=${latestTag//v}-develop.${GITHUB_RUN_ID}+${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          echo "TAG_VERSION=${latestTag//v}" >> "$GITHUB_ENV"

        # Case 3: Any other build (e.g., feature branches).
        # Use the latestTag as the base version and add a suffix with "build", the run_id, and the short SHA.
        else
          # Set PACKAGE_VERSION and VERSION, and add a VERSION_SUFFIX for clarity in identifying the build, run, and commit.
          echo "PACKAGE_VERSION=${latestTag//v}-build.${GITHUB_RUN_ID}+${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          echo "VERSION=${latestTag//v}-build.${GITHUB_RUN_ID}+${GITHUB_SHA::7}" >> "$GITHUB_ENV"
          echo "TAG_VERSION=${latestTag//v}" >> "$GITHUB_ENV"
        fi
      shell: bash

    # Note that code coverage requires 'MessageUponIsolationViolation'.
    - name: Build
      run: dotnet build --binaryLogger --tl --graphBuild -isolate:MessageUponIsolationViolation --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --property:ContinuousIntegrationBuild=true --property:Version=${{ env.VERSION }} --property:InformationalVersion=${{ env.PACKAGE_VERSION }} --property:AssemblyVersion=${{ env.TAG_VERSION }} --property:FileVersion=${{ env.TAG_VERSION }}
      timeout-minutes: 5

    # MacOS is skipped at the moment due to issues with some .NET crypto libraries.
    # Until tests are a fixed a bit. The coverage from the executable does not have a file suffix in Linux.
    - name: Test
      if: runner.os != 'macOS'
      run: dotnet tool run dotnet-coverage collect --output '${{ github.workspace }}/reports/coverage.cobertura.xml' --output-format cobertura '${{ github.workspace }}/test/${{ env.VERIFIABLE_TESTS }}/bin/${{ env.BUILD_CONFIGURATION }}/net10.0/${{ env.VERIFIABLE_TESTS }}' --report-trx --report-trx-filename testresults.trx --results-directory '${{ github.workspace }}/reports'
      timeout-minutes: 5

    # Mutation tests skipped for now due to CI limits and temporarily reduced test coverage...
    # This either requires cd to test directory or --solution-path Verifiable.sln (which may not work).
    # - name: Stryker.NET mutation Tests for Verifiable.Core.csproj
    #  if: ${{ matrix.os == 'ubuntu-latest' }}
    #  run: dotnet stryker --config-file stryker-config.json --reporter progress --reporter html --reporter dashboard --dashboard-api-key ${{ secrets.STRYKER_API_KEY }} --project Verifiable.Core.csproj
    #  timeout-minutes: 15

    #- name: Upload Stryker output artefacts
    #  if: ${{ matrix.os == 'ubuntu-latest' }}
    #  uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
    #  with:
    #    name: 'Stryker output artefacts'
    #    path: ${{ github.workspace }}/StrykerOutput/

    # - name: Publish
    #  run: dotnet publish -c Release --verbosity normal -o ./publish/

    # - name: Archive publish results
    #  uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
    #  with:
    #    name: Verifiable.Benchmarks
    #    path: ./publish/*

    # - name: Run Benchmarks
    #  run: dotnet "./publish/Verifiable.Benchmarks.dll" -f "Verifiable.Benchmarks.*"

    # - name: Upload benchmark results
    #  uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
    #  with:
    #    name: Benchmark_Results
    #    path: ./BenchmarkDotNet.Artifacts/results/*

    # This step is run always (e.g. also for non-PRs) so the results can be inspected on the command line too.
    - name: ReportGenerator
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: dotnet reportgenerator -filefilters:'-**/obj/**;-**/*.g.cs' -assemblyfilters:'+Verifiable*' -reports:'${{ github.workspace }}/reports/coverage.cobertura.xml' -targetdir:'${{ github.workspace }}/reports/coverage/' -reporttypes:'HtmlInline;Cobertura;MarkdownSummary'

    - name: Create test summary
      if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      uses: EnricoMi/publish-unit-test-result-action@afb2984f4d89672b2f9d9c13ae23d53779671984
      with:
        trx_files: '${{ github.workspace }}/reports/**/*.trx'

    - name: Publish coverage summary
      if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      uses: marocchino/sticky-pull-request-comment@67d0dec7b07ed060a405f9b2a64b8ab319fdd7db
      with:
        header: Report
        path: '${{ github.workspace }}/reports/coverage/Summary.md'
        recreate: true

    - name: Pack NuGet packages
      if: ${{ matrix.os == 'ubuntu-latest' && github.repository_owner == 'lumoin' }}
      run: |
        for project in $PROJECTS; do
          path="src/$project/$project.csproj"
          echo "Packing $path"
          dotnet pack --verbosity normal \
            --configuration "$BUILD_CONFIGURATION" \
            --no-build \
            --output nupkgs \
            --property:PackageVersion="${PACKAGE_VERSION%%+*}" \
            "$path"
        done

    # Note that on Windows this would be simply "dotnet dotnet-validate package local ./snupkgs/*.nupkg", the handling of an array of paths works directly.
    - name: Validate generated NuGet files
      if: ${{ matrix.os == 'ubuntu-latest' && github.repository_owner == 'lumoin' && github.actor != 'dependabot[bot]' }}
      run: |
        for file in ./nupkgs/*.nupkg; do
          dotnet dotnet-validate package local "$file"
        done

    - name: Generate artifact attestation
      if: ${{ matrix.os == 'ubuntu-latest' && github.repository_owner == 'lumoin' && github.actor != 'dependabot[bot]' }}
      uses: lumoin/trusted-devsecops/.github/actions/sign-artifact@bd2b7f91e73d758f3126562d6a569fc0f31814ee
      with:
        subject-path: './nupkgs/*.nupkg'

    - name: Upload Verifiable NuGet packages
      if: ${{ matrix.os == 'ubuntu-latest' && github.repository_owner == 'lumoin' && github.actor != 'dependabot[bot]' }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: nupkg
        path: ./nupkgs/*.*

  # The release idea is inspired by https://dusted.codes/github-actions-for-dotnet-core-nuget-packages.
  prerelease:
      name: Create and upload Verifiable pre-release packages to GitHub
      permissions:
         # For setup-dotnet to create package.
        packages: write
      needs: build
      if: ${{ github.ref == 'refs/heads/develop' && github.repository_owner == 'lumoin' }}
      runs-on: ubuntu-latest
      steps:
        - name: Harden Runner
          uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
          with:
            disable-sudo: true
            egress-policy: block
            allowed-endpoints: ${{ env.COMMON_ALLOWED_ENDPOINTS }}

        - name: Download NuGet artifacts
          uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
          with:
            name: nupkg

        - name: Push to GitHub developer feed
          run: dotnet nuget push "**/*.nupkg" --source $GITHUB_FEED --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

  deploy:
    name: Create and upload Verifiable pre-release packages to NuGet.org
    permissions:
        # For setup-dotnet to create package.
      packages: write
    needs: build
    if: ${{ github.event_name == 'release' && github.repository_owner == 'lumoin' }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: ${{ env.COMMON_ALLOWED_ENDPOINTS }}

      - name: Download NuGet artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
        with:
          name: nupkg

      - name: Push to GitHub developer feed
        run: dotnet nuget push "**/*.nupkg" --source $GITHUB_FEED --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

      - name: Push to NuGet feed
        run: dotnet nuget push "**/*.nupkg" --source $NUGET_FEED --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
